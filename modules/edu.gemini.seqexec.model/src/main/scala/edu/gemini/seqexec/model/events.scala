package edu.gemini.seqexec.model

import boopickle.Default._
import edu.gemini.seqexec.model.dhs.ObsId

/**
  * Events that maybe generated by the seqexec. This is very generic and includes e.g. a step execution, stops, etc
  */
sealed trait SeqexecEvent
case object NullEvent extends SeqexecEvent
case class SeqexecConnectionOpenEvent(u: Option[UserDetails]) extends SeqexecEvent
case object SeqexecConnectionCloseEvent extends SeqexecEvent
case class SeqexecConnectionError(e: String) extends SeqexecEvent
case class SequenceStartEvent(id: String) extends SeqexecEvent
case class SequenceCompletedEvent(id: String) extends SeqexecEvent
case class StepExecutedEvent(id: String, completed: Int, remaining: Int, fileId: ObsId) extends SeqexecEvent

object SeqexecEvent {
  // Composite pickler for the seqexec event hierarchy
  // It is not strictly need but reduces the size of the js
  implicit val eventsPickler = compositePickler[SeqexecEvent]
      .addConcreteType[NullEvent.type]
      .addConcreteType[SeqexecConnectionOpenEvent]
      .addConcreteType[SeqexecConnectionCloseEvent.type]
      .addConcreteType[SeqexecConnectionError]
      .addConcreteType[SequenceStartEvent]
      .addConcreteType[SequenceCompletedEvent]
      .addConcreteType[StepExecutedEvent]
}