// Copyright (c) 2016-2017 Association of Universities for Research in Astronomy, Inc. (AURA)
// For license information see LICENSE or https://opensource.org/licenses/BSD-3-Clause

package edu.gemini.seqexec.engine

import edu.gemini.seqexec.model.Model.{CloudCover, Conditions, ImageQuality, Observer, Operator, SkyBackground, WaterVapor}
import edu.gemini.seqexec.model.UserDetails

import scalaz.concurrent.Task
import scalaz.stream.Process
import scalaz.std.string._
import scalaz.syntax.std.option._

/**
  * Created by jluhrs on 9/25/17.
  */
/**
  * Events generated by the user.
  */
sealed trait UserEvent {
  def user: Option[UserDetails]
  def username: String = ~user.map(_.username)
}

final case class Start(id: Sequence.Id, user: Option[UserDetails]) extends UserEvent
final case class Pause(id: Sequence.Id, user: Option[UserDetails]) extends UserEvent
final case class CancelPause(id: Sequence.Id, user: Option[UserDetails]) extends UserEvent
final case class Load(id: Sequence.Id, sequence: Sequence) extends UserEvent {
  val user: Option[UserDetails] = None
}
final case class Unload(id: Sequence.Id) extends UserEvent {
  val user: Option[UserDetails] = None
}
final case class Breakpoint(id: Sequence.Id, user: Option[UserDetails], step: Step.Id, v: Boolean) extends UserEvent
final case class SetOperator(name: Operator, user: Option[UserDetails]) extends UserEvent
final case class SetObserver(id: Sequence.Id, user: Option[UserDetails], name: Observer) extends UserEvent
final case class SetConditions(conditions: Conditions, user: Option[UserDetails]) extends UserEvent
final case class SetImageQuality(iq: ImageQuality, user: Option[UserDetails]) extends UserEvent
final case class SetWaterVapor(wv: WaterVapor, user: Option[UserDetails]) extends UserEvent
final case class SetSkyBackground(wv: SkyBackground, user: Option[UserDetails]) extends UserEvent
final case class SetCloudCover(cc: CloudCover, user: Option[UserDetails]) extends UserEvent
case object Poll extends UserEvent {
  val user: Option[UserDetails] = None
}
// Generic event to put a function in the main Process process, which takes an
// action depending on the current state
final case class GetState(f: (Engine.State) => Task[Option[Process[Task, Event]]]) extends UserEvent {
  val user: Option[UserDetails] = None
}
// Generic event to put a function in the main Process process, which takes an
// action depending on the current state of a specific sequence
final case class GetSeqState(id: Sequence.Id, f: Sequence.State => Option[Process[Task, Event]]) extends UserEvent {
  val user: Option[UserDetails] = None
}
// Calls a user given function in the main Process process to stop an Action.
// It sets the Sequence to be stopped. The user function is called only if the Sequence is running.
final case class ActionStop(id: Sequence.Id, f: Sequence.State => Option[Process[Task, Event]]) extends UserEvent {
  val user: Option[UserDetails] = None
}

// Uses `cont` to resume execution of a paused Action. If the Action is not paused, it does nothing.
final case class ActionResume(id: Sequence.Id, i: Int, cont: Task[Result]) extends UserEvent {
  val user: Option[UserDetails] = None
}

final case class Log(msg: String) extends UserEvent {
  val user: Option[UserDetails] = None
}
